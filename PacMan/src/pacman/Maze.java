package pacman;

public class Maze {
	private static final int WIDTH = 28;
	private static final int HEIGHT = 31;
	
	static final int NORMAL_PACDOT = 0;
	static final int WALL = 1;
	static final int DOOR = 2;
	static final int PATH = 3;
	static final int MAZE_PACDOT = 4;
	static final int SUPER_PACDOT = 5;
	static final int INVISIBLE_PACDOT = 6;

	private int [][] board;
	
	public Maze() {
		board = generateBoard();
	}
	
	public static int getWidth() {
		return WIDTH;
	}

	public static int getHeight() {
		return HEIGHT;
	}

	public int[][] getBoard() {
		return board;
	}
	
	public boolean isWall(int i, int j) {
		if(i < 0 || j < 0)
			return true;
		if(i >= HEIGHT || j >= WIDTH)
			return true;
		return board[i][j] == WALL;
	}
	
	public boolean isDoor(int i, int j) {
		if(i < 0 || j < 0)
			return true;
		if(i >= HEIGHT || j >= WIDTH)
			return true;
		return board[i][j] == DOOR;
	}
	
	public boolean isPacdot(int i, int j) {
		if(board[i][j] == NORMAL_PACDOT)
			return true;
		if(board[i][j] == INVISIBLE_PACDOT)
			return true;
		if(board[i][j] == SUPER_PACDOT)
			return true;
		if(board[i][j] == MAZE_PACDOT)
			return true;
		return false;
	}
	
	

	private int [][] generateBoard() {
		int [][] board = {
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1},
				{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1},
				{1, 1, 1, 0, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{3, 3, 3, 0, 0, 0, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 0, 0, 0, 0, 3, 3, 3},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{1, 0, 0, 0, 1, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 5, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
		};
		return board;
	}
	
	public void generateNewBoard() {
		int [][] board = {
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 3, 3, 3, 0, 1, 1, 3, 3, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 3, 3, 3, 0, 1, 1, 3, 3, 0, 1},
				{1, 0, 0, 0, 3, 3, 0, 1, 1, 1, 3, 3, 0, 3, 3, 0, 1, 1, 3, 3, 3, 0, 1, 1, 0, 0, 0, 1},
				{1, 1, 1, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 3, 3, 0, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 3, 3, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1},
				{1, 1, 1, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 1, 2, 2, 1, 1, 1, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3},
				{1, 1, 1, 0, 1, 1, 0, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 1, 1, 0, 1, 1, 1},
				{1, 0, 0, 0, 1, 1, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 0, 0, 0, 1},
				{1, 0, 3, 3, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 3, 3, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 3, 3, 0, 3, 3, 3, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 3, 3, 0, 3, 3, 3, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 5, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 3, 3, 0, 0, 0, 1, 1, 0, 1},
				{1, 0, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 0, 3, 3, 0, 1, 1, 0, 3, 3, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 1, 1, 3, 3, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 3, 3, 0, 1, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
		};
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if(board[i][j] != WALL) {
					board[i][j] = board[i][j];
				}
			}
		}
		this.board = board;
	}

}
